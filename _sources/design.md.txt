Design
======

`conel`'s design is closely related to polygon mesh in computer
graphics, where two-dimensional surfaces are represented by elements
including vertices, edges, faces, and their connectivities.
`conel` generalizes these standard geometric elements into the notion
of "elemanifolds" so that they are not required to be simplices.
To support high-dimensional topological manifolds, `conel` also
generalizes elemenifolds to include high-dimensional bodies and
"hyperbodies".
By constructions, all elemanifolds other than vertices are open and
only include "interior" points.
The connectivities between elemanifolds, e.g., boundaries, neighbors,
are encoded as networks in `conel`.

What is the minimal information required to uniquely define a `conel`?

Let's consider using `C`.

`conel` elemanifolds may be represented as the following:

    typedef struct {
    	uchar open;
	Topospace *boundaries[];
    } Topospace;

    typedef union {
    	Topospace topo;
    	uchar d;
    } Elemanifold;

`conel` is designed to be flexible and extendable, so it can be used
for a large number of topological polyfold problems.
Scaling to large number of elemanifolds is not our current focus.
This is partially because, in differential geometry applications in
`fadge`, we expect only a small number of elemanifolds are needed.

Elemanifolds and their connectivities do not have any internal
structure, so orientability, metric, differentiable structures, etc
are not captured by `conel`.
This is a design decision to keep `conel` simple.
Additional structures can build on top of `conel`.
